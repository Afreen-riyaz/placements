1.Two Sum Problem
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 
Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.


Solution:

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    *returnSize = 2;
    int* result = (int*)malloc(*returnSize * sizeof(int));
    for(int i = 0; i < numsSize; i++) {
        for(int j = i + 1; j < numsSize; j++) {
            if(nums[i] + nums[j] == target) {
                result[0] = i;
                result[1] = j;
                return result;
            }
        }
    }
    *returnSize = 0;
    return NULL;
}

2.Palindrome Number
Given an integer x, return true if x is a 
palindrome
, and false otherwise.

 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 
Constraints:

-231 <= x <= 231 - 1

Follow up: Could you solve it without converting the integer to a string?

Solution:

bool isPalindrome(int x) {
    int n, d, k = 0;
    
    if (x < 0) return false;
    
    n = x;
    while (n) {
        d = n % 10;
        if (k > (0x7fffffff - d) / 10) return false;    // overflow
        k = k * 10 + d;
        n = n / 10;
    }
    
    return (k == x);
}

6. ZigZag Conversion

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P   A   H   N
A P L S I I G
Y   I   R


And then read line by line: "PAHNAPLSIIGYIR"


Write the code that will take a string and make this conversion given a number of rows:

string convert(string text, int nRows);

convert("PAYPALISHIRING", 3) should return "PAHNAPLSIIGYIR".
*/

char* convert(char* s, int numRows) {
    int len;
    int i, j, k = 0;
    char *p;
    int step, up;
    
    if (!s || !*s || numRows == 1) return s;
    
    len = strlen(s);
    p = malloc((len + 1) * sizeof(char));
    //assert(p);
    
    step = (numRows - 1) * 2;       // max span
    
    for (i = 0; i < numRows; i ++) {
        j = i;                      // first letter of each row
        up = 1;
        while (j < len) {
            p[k ++] = s[j];
            if (i == 0 || i == numRows - 1) {
                j += step;          // full span
            } else if (up) {
                j += step - i * 2;  // full span - offset
                up = 0;
            } else {
                j += i * 2;         // offset
                up = 1;
            }
        }
    }
    p[k] = 0;
    return p;
}


4.Roman to integer
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

 

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].


Solution:
#include <string.h>

int value(char r) {
    switch(r) {
        case 'I': return 1;
        case 'V': return 5;
        case 'X': return 10;
        case 'L': return 50;
        case 'C': return 100;
        case 'D': return 500;
        case 'M': return 1000;
        default: return 0;
    }
}

int romanToInt(char* s) {
    int sum = 0;
    int len = strlen(s);
    for (int i = 0; i < len; i++) {
        int s1 = value(s[i]);
        if (i+1 < len) {
            int s2 = value(s[i+1]);
            if (s1 >= s2)
                sum += s1;
            else {
                sum += (s2 - s1);
                i++; 
            }
        } else {
            sum += s1;
        }
    }
    return sum;
}

5. Find the XOR of Numbers Which Appear Twice.
You are given an array nums, where each number in the array appears either once or twice.
Return the bitwise XOR of all the numbers that appear twice in the array, or 0 if no number appears twice.

Example 1:
Input: nums = [1,2,1,3]
Output: 1
Explanation:
The only number that appears twice in nums is 1.

Example 2:
Input: nums = [1,2,3]
Output: 0
Explanation:
No number appears twice in nums.

Example 3:
Input: nums = [1,2,2,1]
Output: 3
Explanation:
Numbers 1 and 2 appeared twice. 1 XOR 2 == 3.

Solution:

int duplicateNumbersXOR(int* nums, int numsSize) {

    /*
     * Input:
     *  *nums
     *  numsSize
     */

    int *freq = (int *)calloc(1, sizeof(int) * 51);
    int ans = 0;

    /*
     * Algorithm:
     *  (1) Count the frequenices of numbers 
     *  (2) Find the number appears twice, accmulate XOR result
     */

    for (int i = 0; i < numsSize; i++) {
        freq[nums[i]]++;
    }

    for (int i = 1; i <= 50; i++) {
        if (freq[i] == 2) {
            ans ^= i;
        }
    }

    free(freq);

    /*
     * Output:
     *  Return the bitwise XOR of all the numbers that appear twice in 
     *  the array, or 0 if no number appears twice.
     */

    return ans;
}
